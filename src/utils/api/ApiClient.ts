/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class ApiBase {
    authToken = '';
    protected constructor() {
    }
    
    setAuthToken(token: string) {
        this.authToken = token;
    }
  
    protected transformOptions(options: RequestInit): Promise<any> {
        if(this.authToken)
            options.headers = {
                ...options.headers,
                "Authorization": "Bearer "+this.authToken
            }
      return Promise.resolve(options);
    }
  }
  
  export class AccountsClient extends ApiBase {
      private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
      private baseUrl: string;
      protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
  
      constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
          super();
          this.http = http ? http : <any>window;
          this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44341";
      }
  
      registerDonor(command: RegisterDonorCommand): Promise<DonorDto> {
          let url_ = this.baseUrl + "/api/Accounts/SignUp";
          url_ = url_.replace(/[?&]$/, "");
  
          const content_ = JSON.stringify(command);
  
          let options_ = <RequestInit>{
              body: content_,
              method: "POST",
              headers: {
                  "Content-Type": "application/json",
                  "Accept": "application/json"
              }
          };
  
          return this.transformOptions(options_).then(transformedOptions_ => {
              return this.http.fetch(url_, transformedOptions_);
          }).then((_response: Response) => {
              return this.processRegisterDonor(_response);
          });
      }
  
      protected processRegisterDonor(response: Response): Promise<DonorDto> {
          const status = response.status;
          let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
          if (status === 200) {
              return response.text().then((_responseText) => {
              let result200: any = null;
              let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
              result200 = DonorDto.fromJS(resultData200);
              return result200;
              });
          } else if (status !== 200 && status !== 204) {
              return response.text().then((_responseText) => {
              return throwException("An unexpected server error occurred.", status, _responseText, _headers);
              });
          }
          return Promise.resolve<DonorDto>(<any>null);
      }
  }
  
  export class AdminClient extends ApiBase {
      private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
      private baseUrl: string;
      protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
  
      constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
          super();
          this.http = http ? http : <any>window;
          this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44341";
      }
  
      registerStaff(registerStaffCommand: RegisterStaffCommand): Promise<Unit> {
          let url_ = this.baseUrl + "/api/Admin/Staff";
          url_ = url_.replace(/[?&]$/, "");
  
          const content_ = JSON.stringify(registerStaffCommand);
  
          let options_ = <RequestInit>{
              body: content_,
              method: "POST",
              headers: {
                  "Content-Type": "application/json",
                  "Accept": "application/json"
              }
          };
  
          return this.transformOptions(options_).then(transformedOptions_ => {
              return this.http.fetch(url_, transformedOptions_);
          }).then((_response: Response) => {
              return this.processRegisterStaff(_response);
          });
      }
  
      protected processRegisterStaff(response: Response): Promise<Unit> {
          const status = response.status;
          let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
          if (status === 200) {
              return response.text().then((_responseText) => {
              let result200: any = null;
              let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
              result200 = Unit.fromJS(resultData200);
              return result200;
              });
          } else if (status !== 200 && status !== 204) {
              return response.text().then((_responseText) => {
              return throwException("An unexpected server error occurred.", status, _responseText, _headers);
              });
          }
          return Promise.resolve<Unit>(<any>null);
      }
  
      registerBloodBank(registerBloodBankCommand: RegisterBloodBankCommand): Promise<BloodBankDto> {
          let url_ = this.baseUrl + "/api/Admin/BloodBanks";
          url_ = url_.replace(/[?&]$/, "");
  
          const content_ = JSON.stringify(registerBloodBankCommand);
  
          let options_ = <RequestInit>{
              body: content_,
              method: "POST",
              headers: {
                  "Content-Type": "application/json",
                  "Accept": "application/json"
              }
          };
  
          return this.transformOptions(options_).then(transformedOptions_ => {
              return this.http.fetch(url_, transformedOptions_);
          }).then((_response: Response) => {
              return this.processRegisterBloodBank(_response);
          });
      }
  
      protected processRegisterBloodBank(response: Response): Promise<BloodBankDto> {
          const status = response.status;
          let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
          if (status === 200) {
              return response.text().then((_responseText) => {
              let result200: any = null;
              let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
              result200 = BloodBankDto.fromJS(resultData200);
              return result200;
              });
          } else if (status !== 200 && status !== 204) {
              return response.text().then((_responseText) => {
              return throwException("An unexpected server error occurred.", status, _responseText, _headers);
              });
          }
          return Promise.resolve<BloodBankDto>(<any>null);
      }
  
      getBloodBank(): Promise<BloodBankDto[]> {
          let url_ = this.baseUrl + "/api/Admin/BloodBanks";
          url_ = url_.replace(/[?&]$/, "");
  
          let options_ = <RequestInit>{
              method: "GET",
              headers: {
                  "Accept": "application/json"
              }
          };
  
          return this.transformOptions(options_).then(transformedOptions_ => {
              return this.http.fetch(url_, transformedOptions_);
          }).then((_response: Response) => {
              return this.processGetBloodBank(_response);
          });
      }
  
      protected processGetBloodBank(response: Response): Promise<BloodBankDto[]> {
          const status = response.status;
          let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
          if (status === 200) {
              return response.text().then((_responseText) => {
              let result200: any = null;
              let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
              if (Array.isArray(resultData200)) {
                  result200 = [] as any;
                  for (let item of resultData200)
                      result200!.push(BloodBankDto.fromJS(item));
              }
              else {
                  result200 = <any>null;
              }
              return result200;
              });
          } else if (status !== 200 && status !== 204) {
              return response.text().then((_responseText) => {
              return throwException("An unexpected server error occurred.", status, _responseText, _headers);
              });
          }
          return Promise.resolve<BloodBankDto[]>(<any>null);
      }
  }
  
  export class AuthClient extends ApiBase {
      private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
      private baseUrl: string;
      protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
  
      constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
          super();
          this.http = http ? http : <any>window;
          this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44341";
      }
  
      signIn(request: AuthenticateRequest): Promise<AuthenticationResult> {
          let url_ = this.baseUrl + "/api/Auth";
          url_ = url_.replace(/[?&]$/, "");
  
          const content_ = JSON.stringify(request);
  
          let options_ = <RequestInit>{
              body: content_,
              method: "POST",
              headers: {
                  "Content-Type": "application/json",
                  "Accept": "application/json"
              }
          };
  
          return this.transformOptions(options_).then(transformedOptions_ => {
              return this.http.fetch(url_, transformedOptions_);
          }).then((_response: Response) => {
              return this.processSignIn(_response);
          });
      }
  
      protected processSignIn(response: Response): Promise<AuthenticationResult> {
          const status = response.status;
          let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
          if (status === 200) {
              return response.text().then((_responseText) => {
              let result200: any = null;
              let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
              result200 = AuthenticationResult.fromJS(resultData200);
              return result200;
              });
          } else if (status !== 200 && status !== 204) {
              return response.text().then((_responseText) => {
              return throwException("An unexpected server error occurred.", status, _responseText, _headers);
              });
          }
          return Promise.resolve<AuthenticationResult>(<any>null);
      }
  
      refreshToken(request: RefreshTokenRequest): Promise<AuthenticationResult> {
          let url_ = this.baseUrl + "/api/Auth/Refresh";
          url_ = url_.replace(/[?&]$/, "");
  
          const content_ = JSON.stringify(request);
  
          let options_ = <RequestInit>{
              body: content_,
              method: "POST",
              headers: {
                  "Content-Type": "application/json",
                  "Accept": "application/json"
              }
          };
  
          return this.transformOptions(options_).then(transformedOptions_ => {
              return this.http.fetch(url_, transformedOptions_);
          }).then((_response: Response) => {
              return this.processRefreshToken(_response);
          });
      }
  
      protected processRefreshToken(response: Response): Promise<AuthenticationResult> {
          const status = response.status;
          let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
          if (status === 200) {
              return response.text().then((_responseText) => {
              let result200: any = null;
              let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
              result200 = AuthenticationResult.fromJS(resultData200);
              return result200;
              });
          } else if (status !== 200 && status !== 204) {
              return response.text().then((_responseText) => {
              return throwException("An unexpected server error occurred.", status, _responseText, _headers);
              });
          }
          return Promise.resolve<AuthenticationResult>(<any>null);
      }
  
      revokeRefreshToken(request: RevokeRefreshTokenRequest): Promise<FileResponse> {
          let url_ = this.baseUrl + "/api/Auth/Revoke";
          url_ = url_.replace(/[?&]$/, "");
  
          const content_ = JSON.stringify(request);
  
          let options_ = <RequestInit>{
              body: content_,
              method: "POST",
              headers: {
                  "Content-Type": "application/json",
                  "Accept": "application/octet-stream"
              }
          };
  
          return this.transformOptions(options_).then(transformedOptions_ => {
              return this.http.fetch(url_, transformedOptions_);
          }).then((_response: Response) => {
              return this.processRevokeRefreshToken(_response);
          });
      }
  
      protected processRevokeRefreshToken(response: Response): Promise<FileResponse> {
          const status = response.status;
          let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
          if (status === 200 || status === 206) {
              const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
              const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
              const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
              return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
          } else if (status !== 200 && status !== 204) {
              return response.text().then((_responseText) => {
              return throwException("An unexpected server error occurred.", status, _responseText, _headers);
              });
          }
          return Promise.resolve<FileResponse>(<any>null);
      }
  }
  
  export class DictionariesClient extends ApiBase {
      private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
      private baseUrl: string;
      protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
  
      constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
          super();
          this.http = http ? http : <any>window;
          this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44341";
      }
  
      getBloodTypes(): Promise<BloodTypeDto[]> {
          let url_ = this.baseUrl + "/api/Dictionaries/BloodTypes";
          url_ = url_.replace(/[?&]$/, "");
  
          let options_ = <RequestInit>{
              method: "GET",
              headers: {
                  "Accept": "application/json"
              }
          };
  
          return this.transformOptions(options_).then(transformedOptions_ => {
              return this.http.fetch(url_, transformedOptions_);
          }).then((_response: Response) => {
              return this.processGetBloodTypes(_response);
          });
      }
  
      protected processGetBloodTypes(response: Response): Promise<BloodTypeDto[]> {
          const status = response.status;
          let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
          if (status === 200) {
              return response.text().then((_responseText) => {
              let result200: any = null;
              let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
              if (Array.isArray(resultData200)) {
                  result200 = [] as any;
                  for (let item of resultData200)
                      result200!.push(BloodTypeDto.fromJS(item));
              }
              else {
                  result200 = <any>null;
              }
              return result200;
              });
          } else if (status !== 200 && status !== 204) {
              return response.text().then((_responseText) => {
              return throwException("An unexpected server error occurred.", status, _responseText, _headers);
              });
          }
          return Promise.resolve<BloodTypeDto[]>(<any>null);
      }
  
      getDonationTypes(): Promise<DonationTypeDto[]> {
          let url_ = this.baseUrl + "/api/Dictionaries/DonationTypes";
          url_ = url_.replace(/[?&]$/, "");
  
          let options_ = <RequestInit>{
              method: "GET",
              headers: {
                  "Accept": "application/json"
              }
          };
  
          return this.transformOptions(options_).then(transformedOptions_ => {
              return this.http.fetch(url_, transformedOptions_);
          }).then((_response: Response) => {
              return this.processGetDonationTypes(_response);
          });
      }
  
      protected processGetDonationTypes(response: Response): Promise<DonationTypeDto[]> {
          const status = response.status;
          let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
          if (status === 200) {
              return response.text().then((_responseText) => {
              let result200: any = null;
              let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
              if (Array.isArray(resultData200)) {
                  result200 = [] as any;
                  for (let item of resultData200)
                      result200!.push(DonationTypeDto.fromJS(item));
              }
              else {
                  result200 = <any>null;
              }
              return result200;
              });
          } else if (status !== 200 && status !== 204) {
              return response.text().then((_responseText) => {
              return throwException("An unexpected server error occurred.", status, _responseText, _headers);
              });
          }
          return Promise.resolve<DonationTypeDto[]>(<any>null);
      }
  }
  
  export class DonationsClient extends ApiBase {
      private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
      private baseUrl: string;
      protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
  
      constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
          super();
          this.http = http ? http : <any>window;
          this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44341";
      }
  
      getDonationInterval(fromType: string | null, toType: string | null): Promise<string> {
          let url_ = this.baseUrl + "/api/Donations/Interval/{fromType}/{toType}";
          if (fromType === undefined || fromType === null)
              throw new Error("The parameter 'fromType' must be defined.");
          url_ = url_.replace("{FromType}", encodeURIComponent("" + fromType));
          if (toType === undefined || toType === null)
              throw new Error("The parameter 'toType' must be defined.");
          url_ = url_.replace("{ToType}", encodeURIComponent("" + toType));
          url_ = url_.replace(/[?&]$/, "");
  
          let options_ = <RequestInit>{
              method: "GET",
              headers: {
                  "Accept": "application/json"
              }
          };
  
          return this.transformOptions(options_).then(transformedOptions_ => {
              return this.http.fetch(url_, transformedOptions_);
          }).then((_response: Response) => {
              return this.processGetDonationInterval(_response);
          });
      }
  
      protected processGetDonationInterval(response: Response): Promise<string> {
          const status = response.status;
          let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
          if (status === 200) {
              return response.text().then((_responseText) => {
              let result200: any = null;
              let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                  result200 = resultData200 !== undefined ? resultData200 : <any>null;
      
              return result200;
              });
          } else if (status !== 200 && status !== 204) {
              return response.text().then((_responseText) => {
              return throwException("An unexpected server error occurred.", status, _responseText, _headers);
              });
          }
          return Promise.resolve<string>(<any>null);
      }
  
      getDonationConversion(fromType: string | null, toType: string | null): Promise<number> {
          let url_ = this.baseUrl + "/api/Donations/Conversion/{fromType}/{toType}";
          if (fromType === undefined || fromType === null)
              throw new Error("The parameter 'fromType' must be defined.");
          url_ = url_.replace("{FromType}", encodeURIComponent("" + fromType));
          if (toType === undefined || toType === null)
              throw new Error("The parameter 'toType' must be defined.");
          url_ = url_.replace("{ToType}", encodeURIComponent("" + toType));
          url_ = url_.replace(/[?&]$/, "");
  
          let options_ = <RequestInit>{
              method: "GET",
              headers: {
                  "Accept": "application/json"
              }
          };
  
          return this.transformOptions(options_).then(transformedOptions_ => {
              return this.http.fetch(url_, transformedOptions_);
          }).then((_response: Response) => {
              return this.processGetDonationConversion(_response);
          });
      }
  
      protected processGetDonationConversion(response: Response): Promise<number> {
          const status = response.status;
          let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
          if (status === 200) {
              return response.text().then((_responseText) => {
              let result200: any = null;
              let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                  result200 = resultData200 !== undefined ? resultData200 : <any>null;
      
              return result200;
              });
          } else if (status !== 200 && status !== 204) {
              return response.text().then((_responseText) => {
              return throwException("An unexpected server error occurred.", status, _responseText, _headers);
              });
          }
          return Promise.resolve<number>(<any>null);
      }
  }
  
  export class DonorsClient extends ApiBase {
      private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
      private baseUrl: string;
      protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
  
      constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
          super();
          this.http = http ? http : <any>window;
          this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44341";
      }
  
      getCurrentDonorInfo(): Promise<DonorDto> {
          let url_ = this.baseUrl + "/api/Donors/Info";
          url_ = url_.replace(/[?&]$/, "");
  
          let options_ = <RequestInit>{
              method: "GET",
              headers: {
                  "Accept": "application/json"
              }
          };
  
          return this.transformOptions(options_).then(transformedOptions_ => {
              return this.http.fetch(url_, transformedOptions_);
          }).then((_response: Response) => {
              return this.processGetCurrentDonorInfo(_response);
          });
      }
  
      protected processGetCurrentDonorInfo(response: Response): Promise<DonorDto> {
          const status = response.status;
          let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
          if (status === 200) {
              return response.text().then((_responseText) => {
              let result200: any = null;
              let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
              result200 = DonorDto.fromJS(resultData200);
              return result200;
              });
          } else if (status !== 200 && status !== 204) {
              return response.text().then((_responseText) => {
              return throwException("An unexpected server error occurred.", status, _responseText, _headers);
              });
          }
          return Promise.resolve<DonorDto>(<any>null);
      }
  
      getDonations(): Promise<DonationGroupDto[]> {
          let url_ = this.baseUrl + "/api/Donors/Donations";
          url_ = url_.replace(/[?&]$/, "");
  
          let options_ = <RequestInit>{
              method: "GET",
              headers: {
                  "Accept": "application/json"
              }
          };
  
          return this.transformOptions(options_).then(transformedOptions_ => {
              return this.http.fetch(url_, transformedOptions_);
          }).then((_response: Response) => {
              return this.processGetDonations(_response);
          });
      }
  
      protected processGetDonations(response: Response): Promise<DonationGroupDto[]> {
          const status = response.status;
          let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
          if (status === 200) {
              return response.text().then((_responseText) => {
              let result200: any = null;
              let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
              if (Array.isArray(resultData200)) {
                  result200 = [] as any;
                  for (let item of resultData200)
                      result200!.push(DonationGroupDto.fromJS(item));
              }
              else {
                  result200 = <any>null;
              }
              return result200;
              });
          } else if (status !== 200 && status !== 204) {
              return response.text().then((_responseText) => {
              return throwException("An unexpected server error occurred.", status, _responseText, _headers);
              });
          }
          return Promise.resolve<DonationGroupDto[]>(<any>null);
      }
  
      addDonation(donations: DonationDto[]): Promise<DonationDto[]> {
          let url_ = this.baseUrl + "/api/Donors/Donations";
          url_ = url_.replace(/[?&]$/, "");
  
          const content_ = JSON.stringify(donations);
  
          let options_ = <RequestInit>{
              body: content_,
              method: "POST",
              headers: {
                  "Content-Type": "application/json",
                  "Accept": "application/json"
              }
          };
  
          return this.transformOptions(options_).then(transformedOptions_ => {
              return this.http.fetch(url_, transformedOptions_);
          }).then((_response: Response) => {
              return this.processAddDonation(_response);
          });
      }
  
      protected processAddDonation(response: Response): Promise<DonationDto[]> {
          const status = response.status;
          let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
          if (status === 200) {
              return response.text().then((_responseText) => {
              let result200: any = null;
              let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
              if (Array.isArray(resultData200)) {
                  result200 = [] as any;
                  for (let item of resultData200)
                      result200!.push(DonationDto.fromJS(item));
              }
              else {
                  result200 = <any>null;
              }
              return result200;
              });
          } else if (status !== 200 && status !== 204) {
              return response.text().then((_responseText) => {
              return throwException("An unexpected server error occurred.", status, _responseText, _headers);
              });
          }
          return Promise.resolve<DonationDto[]>(<any>null);
      }
  
      getDonationSummary(donationType: string | null | undefined): Promise<DonationSummaryDto> {
          let url_ = this.baseUrl + "/api/Donors/Summary?";
          if (donationType !== undefined && donationType !== null)
              url_ += "donationType=" + encodeURIComponent("" + donationType) + "&";
          url_ = url_.replace(/[?&]$/, "");
  
          let options_ = <RequestInit>{
              method: "GET",
              headers: {
                  "Accept": "application/json"
              }
          };
  
          return this.transformOptions(options_).then(transformedOptions_ => {
              return this.http.fetch(url_, transformedOptions_);
          }).then((_response: Response) => {
              return this.processGetDonationSummary(_response);
          });
      }
  
      protected processGetDonationSummary(response: Response): Promise<DonationSummaryDto> {
          const status = response.status;
          let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
          if (status === 200) {
              return response.text().then((_responseText) => {
              let result200: any = null;
              let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
              result200 = DonationSummaryDto.fromJS(resultData200);
              return result200;
              });
          } else if (status !== 200 && status !== 204) {
              return response.text().then((_responseText) => {
              return throwException("An unexpected server error occurred.", status, _responseText, _headers);
              });
          }
          return Promise.resolve<DonationSummaryDto>(<any>null);
      }
  
      getUserDonationInterval(toType: string | null): Promise<string> {
          let url_ = this.baseUrl + "/api/Donors/Interval/{toType}";
          if (toType === undefined || toType === null)
              throw new Error("The parameter 'toType' must be defined.");
          url_ = url_.replace("{toType}", encodeURIComponent("" + toType));
          url_ = url_.replace(/[?&]$/, "");
  
          let options_ = <RequestInit>{
              method: "GET",
              headers: {
                  "Accept": "application/json"
              }
          };
  
          return this.transformOptions(options_).then(transformedOptions_ => {
              return this.http.fetch(url_, transformedOptions_);
          }).then((_response: Response) => {
              return this.processGetUserDonationInterval(_response);
          });
      }
  
      protected processGetUserDonationInterval(response: Response): Promise<string> {
          const status = response.status;
          let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
          if (status === 200) {
              return response.text().then((_responseText) => {
              let result200: any = null;
              let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                  result200 = resultData200 !== undefined ? resultData200 : <any>null;
      
              return result200;
              });
          } else if (status !== 200 && status !== 204) {
              return response.text().then((_responseText) => {
              return throwException("An unexpected server error occurred.", status, _responseText, _headers);
              });
          }
          return Promise.resolve<string>(<any>null);
      }
  }
  
  export class StaffClient extends ApiBase {
      private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
      private baseUrl: string;
      protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
  
      constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
          super();
          this.http = http ? http : <any>window;
          this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44341";
      }
  
      addDonations(donations: DonationWithPeselDto[]): Promise<Unit> {
          let url_ = this.baseUrl + "/api/Staff/Donations";
          url_ = url_.replace(/[?&]$/, "");
  
          const content_ = JSON.stringify(donations);
  
          let options_ = <RequestInit>{
              body: content_,
              method: "POST",
              headers: {
                  "Content-Type": "application/json",
                  "Accept": "application/json"
              }
          };
  
          return this.transformOptions(options_).then(transformedOptions_ => {
              return this.http.fetch(url_, transformedOptions_);
          }).then((_response: Response) => {
              return this.processAddDonations(_response);
          });
      }
  
      protected processAddDonations(response: Response): Promise<Unit> {
          const status = response.status;
          let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
          if (status === 200) {
              return response.text().then((_responseText) => {
              let result200: any = null;
              let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
              result200 = Unit.fromJS(resultData200);
              return result200;
              });
          } else if (status !== 200 && status !== 204) {
              return response.text().then((_responseText) => {
              return throwException("An unexpected server error occurred.", status, _responseText, _headers);
              });
          }
          return Promise.resolve<Unit>(<any>null);
      }
  
      deleteDonations(deleteDonationRequest: DeleteDonationRequest[]): Promise<Unit> {
          let url_ = this.baseUrl + "/api/Staff/Donations";
          url_ = url_.replace(/[?&]$/, "");
  
          const content_ = JSON.stringify(deleteDonationRequest);
  
          let options_ = <RequestInit>{
              body: content_,
              method: "DELETE",
              headers: {
                  "Content-Type": "application/json",
                  "Accept": "application/json"
              }
          };
  
          return this.transformOptions(options_).then(transformedOptions_ => {
              return this.http.fetch(url_, transformedOptions_);
          }).then((_response: Response) => {
              return this.processDeleteDonations(_response);
          });
      }
  
      protected processDeleteDonations(response: Response): Promise<Unit> {
          const status = response.status;
          let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
          if (status === 200) {
              return response.text().then((_responseText) => {
              let result200: any = null;
              let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
              result200 = Unit.fromJS(resultData200);
              return result200;
              });
          } else if (status !== 200 && status !== 204) {
              return response.text().then((_responseText) => {
              return throwException("An unexpected server error occurred.", status, _responseText, _headers);
              });
          }
          return Promise.resolve<Unit>(<any>null);
      }
  
      getDonorInfo(getDonorInfoQuery: GetDonorInfoQuery): Promise<DonorExtDto> {
          let url_ = this.baseUrl + "/api/Staff/Donor";
          url_ = url_.replace(/[?&]$/, "");
  
          const content_ = JSON.stringify(getDonorInfoQuery);
  
          let options_ = <RequestInit>{
              body: content_,
              method: "GET",
              headers: {
                  "Content-Type": "application/json",
                  "Accept": "application/json"
              }
          };
  
          return this.transformOptions(options_).then(transformedOptions_ => {
              return this.http.fetch(url_, transformedOptions_);
          }).then((_response: Response) => {
              return this.processGetDonorInfo(_response);
          });
      }
  
      protected processGetDonorInfo(response: Response): Promise<DonorExtDto> {
          const status = response.status;
          let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
          if (status === 200) {
              return response.text().then((_responseText) => {
              let result200: any = null;
              let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
              result200 = DonorExtDto.fromJS(resultData200);
              return result200;
              });
          } else if (status !== 200 && status !== 204) {
              return response.text().then((_responseText) => {
              return throwException("An unexpected server error occurred.", status, _responseText, _headers);
              });
          }
          return Promise.resolve<DonorExtDto>(<any>null);
      }
  
      verifyDonor(verifyDonorCommand: VerifyDonorCommand): Promise<Unit> {
          let url_ = this.baseUrl + "/api/Staff/Donor/Verification";
          url_ = url_.replace(/[?&]$/, "");
  
          const content_ = JSON.stringify(verifyDonorCommand);
  
          let options_ = <RequestInit>{
              body: content_,
              method: "POST",
              headers: {
                  "Content-Type": "application/json",
                  "Accept": "application/json"
              }
          };
  
          return this.transformOptions(options_).then(transformedOptions_ => {
              return this.http.fetch(url_, transformedOptions_);
          }).then((_response: Response) => {
              return this.processVerifyDonor(_response);
          });
      }
  
      protected processVerifyDonor(response: Response): Promise<Unit> {
          const status = response.status;
          let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
          if (status === 200) {
              return response.text().then((_responseText) => {
              let result200: any = null;
              let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
              result200 = Unit.fromJS(resultData200);
              return result200;
              });
          } else if (status !== 200 && status !== 204) {
              return response.text().then((_responseText) => {
              return throwException("An unexpected server error occurred.", status, _responseText, _headers);
              });
          }
          return Promise.resolve<Unit>(<any>null);
      }
  }
  
  export class DonorDto implements IDonorDto {
      id?: string;
      firstName?: string | undefined;
      lastName?: string | undefined;
      birthDay?: Date;
      gender?: GenderType;
      bloodType?: BloodTypeDto | undefined;
  
      constructor(data?: IDonorDto) {
          if (data) {
              for (var property in data) {
                  if (data.hasOwnProperty(property))
                      (<any>this)[property] = (<any>data)[property];
              }
              this.bloodType = data.bloodType && !(<any>data.bloodType).toJSON ? new BloodTypeDto(data.bloodType) : <BloodTypeDto>this.bloodType;
          }
      }
  
      init(_data?: any) {
          if (_data) {
              this.id = _data["id"];
              this.firstName = _data["firstName"];
              this.lastName = _data["lastName"];
              this.birthDay = _data["birthDay"] ? new Date(_data["birthDay"].toString()) : <any>undefined;
              this.gender = _data["gender"];
              this.bloodType = _data["bloodType"] ? BloodTypeDto.fromJS(_data["bloodType"]) : <any>undefined;
          }
      }
  
      static fromJS(data: any): DonorDto {
          data = typeof data === 'object' ? data : {};
          let result = new DonorDto();
          result.init(data);
          return result;
      }
  
      toJSON(data?: any) {
          data = typeof data === 'object' ? data : {};
          data["id"] = this.id;
          data["firstName"] = this.firstName;
          data["lastName"] = this.lastName;
          data["birthDay"] = this.birthDay ? this.birthDay.toISOString() : <any>undefined;
          data["gender"] = this.gender;
          data["bloodType"] = this.bloodType ? this.bloodType.toJSON() : <any>undefined;
          return data;
      }
  }
  
  export interface IDonorDto {
      id?: string;
      firstName?: string | undefined;
      lastName?: string | undefined;
      birthDay?: Date;
      gender?: GenderType;
      bloodType?: IBloodTypeDto | undefined;
  }
  
  export enum GenderType {
      Male = 1,
      Female = 2,
  }
  
  export class BloodTypeDto implements IBloodTypeDto {
      label?: string | undefined;
      symbol?: string | undefined;
  
      constructor(data?: IBloodTypeDto) {
          if (data) {
              for (var property in data) {
                  if (data.hasOwnProperty(property))
                      (<any>this)[property] = (<any>data)[property];
              }
          }
      }
  
      init(_data?: any) {
          if (_data) {
              this.label = _data["label"];
              this.symbol = _data["symbol"];
          }
      }
  
      static fromJS(data: any): BloodTypeDto {
          data = typeof data === 'object' ? data : {};
          let result = new BloodTypeDto();
          result.init(data);
          return result;
      }
  
      toJSON(data?: any) {
          data = typeof data === 'object' ? data : {};
          data["label"] = this.label;
          data["symbol"] = this.symbol;
          return data;
      }
  }
  
  export interface IBloodTypeDto {
      label?: string | undefined;
      symbol?: string | undefined;
  }
  
  export class RegisterDonorCommand implements IRegisterDonorCommand {
      email?: string | undefined;
      password?: string | undefined;
      confirmPassword?: string | undefined;
      firstName?: string | undefined;
      lastName?: string | undefined;
      gender?: GenderType;
      bloodTypeLabel?: string | undefined;
      birthDay?: Date;
  
      constructor(data?: IRegisterDonorCommand) {
          if (data) {
              for (var property in data) {
                  if (data.hasOwnProperty(property))
                      (<any>this)[property] = (<any>data)[property];
              }
          }
      }
  
      init(_data?: any) {
          if (_data) {
              this.email = _data["email"];
              this.password = _data["password"];
              this.confirmPassword = _data["confirmPassword"];
              this.firstName = _data["firstName"];
              this.lastName = _data["lastName"];
              this.gender = _data["gender"];
              this.bloodTypeLabel = _data["bloodTypeLabel"];
              this.birthDay = _data["birthDay"] ? new Date(_data["birthDay"].toString()) : <any>undefined;
          }
      }
  
      static fromJS(data: any): RegisterDonorCommand {
          data = typeof data === 'object' ? data : {};
          let result = new RegisterDonorCommand();
          result.init(data);
          return result;
      }
  
      toJSON(data?: any) {
          data = typeof data === 'object' ? data : {};
          data["email"] = this.email;
          data["password"] = this.password;
          data["confirmPassword"] = this.confirmPassword;
          data["firstName"] = this.firstName;
          data["lastName"] = this.lastName;
          data["gender"] = this.gender;
          data["bloodTypeLabel"] = this.bloodTypeLabel;
          data["birthDay"] = this.birthDay ? this.birthDay.toISOString() : <any>undefined;
          return data;
      }
  }
  
  export interface IRegisterDonorCommand {
      email?: string | undefined;
      password?: string | undefined;
      confirmPassword?: string | undefined;
      firstName?: string | undefined;
      lastName?: string | undefined;
      gender?: GenderType;
      bloodTypeLabel?: string | undefined;
      birthDay?: Date;
  }
  
  /** Represents a void type, since Void is not a valid return type in C#. */
  export class Unit implements IUnit {
  
      constructor(data?: IUnit) {
          if (data) {
              for (var property in data) {
                  if (data.hasOwnProperty(property))
                      (<any>this)[property] = (<any>data)[property];
              }
          }
      }
  
      init(_data?: any) {
      }
  
      static fromJS(data: any): Unit {
          data = typeof data === 'object' ? data : {};
          let result = new Unit();
          result.init(data);
          return result;
      }
  
      toJSON(data?: any) {
          data = typeof data === 'object' ? data : {};
          return data;
      }
  }
  
  /** Represents a void type, since Void is not a valid return type in C#. */
  export interface IUnit {
  }
  
  export class RegisterStaffCommand implements IRegisterStaffCommand {
      username?: string | undefined;
      email?: string | undefined;
      password?: string | undefined;
      confirmPassword?: string | undefined;
      bloodBankId?: BloodBankId | undefined;
  
      constructor(data?: IRegisterStaffCommand) {
          if (data) {
              for (var property in data) {
                  if (data.hasOwnProperty(property))
                      (<any>this)[property] = (<any>data)[property];
              }
              this.bloodBankId = data.bloodBankId && !(<any>data.bloodBankId).toJSON ? new BloodBankId(data.bloodBankId) : <BloodBankId>this.bloodBankId;
          }
      }
  
      init(_data?: any) {
          if (_data) {
              this.username = _data["username"];
              this.email = _data["email"];
              this.password = _data["password"];
              this.confirmPassword = _data["confirmPassword"];
              this.bloodBankId = _data["bloodBankId"] ? BloodBankId.fromJS(_data["bloodBankId"]) : <any>undefined;
          }
      }
  
      static fromJS(data: any): RegisterStaffCommand {
          data = typeof data === 'object' ? data : {};
          let result = new RegisterStaffCommand();
          result.init(data);
          return result;
      }
  
      toJSON(data?: any) {
          data = typeof data === 'object' ? data : {};
          data["username"] = this.username;
          data["email"] = this.email;
          data["password"] = this.password;
          data["confirmPassword"] = this.confirmPassword;
          data["bloodBankId"] = this.bloodBankId ? this.bloodBankId.toJSON() : <any>undefined;
          return data;
      }
  }
  
  export interface IRegisterStaffCommand {
      username?: string | undefined;
      email?: string | undefined;
      password?: string | undefined;
      confirmPassword?: string | undefined;
      bloodBankId?: IBloodBankId | undefined;
  }
  
  export abstract class ValueObject implements IValueObject {
  
      constructor(data?: IValueObject) {
          if (data) {
              for (var property in data) {
                  if (data.hasOwnProperty(property))
                      (<any>this)[property] = (<any>data)[property];
              }
          }
      }
  
      init(_data?: any) {
      }
  
      static fromJS(data: any): ValueObject {
          data = typeof data === 'object' ? data : {};
          throw new Error("The abstract class 'ValueObject' cannot be instantiated.");
      }
  
      toJSON(data?: any) {
          data = typeof data === 'object' ? data : {};
          return data;
      }
  }
  
  export interface IValueObject {
  }
  
  export abstract class Identity extends ValueObject implements IIdentity {
      id?: string;
  
      constructor(data?: IIdentity) {
          super(data);
      }
  
      init(_data?: any) {
          super.init(_data);
          if (_data) {
              this.id = _data["id"];
          }
      }
  
      static fromJS(data: any): Identity {
          data = typeof data === 'object' ? data : {};
          throw new Error("The abstract class 'Identity' cannot be instantiated.");
      }
  
      toJSON(data?: any) {
          data = typeof data === 'object' ? data : {};
          data["id"] = this.id;
          super.toJSON(data);
          return data;
      }
  }
  
  export interface IIdentity extends IValueObject {
      id?: string;
  }
  
  export abstract class IdentityOfBloodBankId extends Identity implements IIdentityOfBloodBankId {
  
      constructor(data?: IIdentityOfBloodBankId) {
          super(data);
      }
  
      init(_data?: any) {
          super.init(_data);
      }
  
      static fromJS(data: any): IdentityOfBloodBankId {
          data = typeof data === 'object' ? data : {};
          throw new Error("The abstract class 'IdentityOfBloodBankId' cannot be instantiated.");
      }
  
      toJSON(data?: any) {
          data = typeof data === 'object' ? data : {};
          super.toJSON(data);
          return data;
      }
  }
  
  export interface IIdentityOfBloodBankId extends IIdentity {
  }
  
  export class BloodBankId extends IdentityOfBloodBankId implements IBloodBankId {
  
      constructor(data?: IBloodBankId) {
          super(data);
      }
  
      init(_data?: any) {
          super.init(_data);
      }
  
      static fromJS(data: any): BloodBankId {
          data = typeof data === 'object' ? data : {};
          let result = new BloodBankId();
          result.init(data);
          return result;
      }
  
      toJSON(data?: any) {
          data = typeof data === 'object' ? data : {};
          super.toJSON(data);
          return data;
      }
  }
  
  export interface IBloodBankId extends IIdentityOfBloodBankId {
  }
  
  export class BloodBankDto implements IBloodBankDto {
      id?: string;
      name?: string | undefined;
      address?: string | undefined;
  
      constructor(data?: IBloodBankDto) {
          if (data) {
              for (var property in data) {
                  if (data.hasOwnProperty(property))
                      (<any>this)[property] = (<any>data)[property];
              }
          }
      }
  
      init(_data?: any) {
          if (_data) {
              this.id = _data["id"];
              this.name = _data["name"];
              this.address = _data["address"];
          }
      }
  
      static fromJS(data: any): BloodBankDto {
          data = typeof data === 'object' ? data : {};
          let result = new BloodBankDto();
          result.init(data);
          return result;
      }
  
      toJSON(data?: any) {
          data = typeof data === 'object' ? data : {};
          data["id"] = this.id;
          data["name"] = this.name;
          data["address"] = this.address;
          return data;
      }
  }
  
  export interface IBloodBankDto {
      id?: string;
      name?: string | undefined;
      address?: string | undefined;
  }
  
  export class RegisterBloodBankCommand implements IRegisterBloodBankCommand {
      name?: string | undefined;
      address?: string | undefined;
  
      constructor(data?: IRegisterBloodBankCommand) {
          if (data) {
              for (var property in data) {
                  if (data.hasOwnProperty(property))
                      (<any>this)[property] = (<any>data)[property];
              }
          }
      }
  
      init(_data?: any) {
          if (_data) {
              this.name = _data["name"];
              this.address = _data["address"];
          }
      }
  
      static fromJS(data: any): RegisterBloodBankCommand {
          data = typeof data === 'object' ? data : {};
          let result = new RegisterBloodBankCommand();
          result.init(data);
          return result;
      }
  
      toJSON(data?: any) {
          data = typeof data === 'object' ? data : {};
          data["name"] = this.name;
          data["address"] = this.address;
          return data;
      }
  }
  
  export interface IRegisterBloodBankCommand {
      name?: string | undefined;
      address?: string | undefined;
  }
  
  export class AuthenticationResult implements IAuthenticationResult {
      success?: boolean;
      message?: string | undefined;
      accessToken?: JwtToken | undefined;
      refreshToken?: JwtToken | undefined;
  
      constructor(data?: IAuthenticationResult) {
          if (data) {
              for (var property in data) {
                  if (data.hasOwnProperty(property))
                      (<any>this)[property] = (<any>data)[property];
              }
              this.accessToken = data.accessToken && !(<any>data.accessToken).toJSON ? new JwtToken(data.accessToken) : <JwtToken>this.accessToken;
              this.refreshToken = data.refreshToken && !(<any>data.refreshToken).toJSON ? new JwtToken(data.refreshToken) : <JwtToken>this.refreshToken;
          }
      }
  
      init(_data?: any) {
          if (_data) {
              this.success = _data["success"];
              this.message = _data["message"];
              this.accessToken = _data["accessToken"] ? JwtToken.fromJS(_data["accessToken"]) : <any>undefined;
              this.refreshToken = _data["refreshToken"] ? JwtToken.fromJS(_data["refreshToken"]) : <any>undefined;
          }
      }
  
      static fromJS(data: any): AuthenticationResult {
          data = typeof data === 'object' ? data : {};
          let result = new AuthenticationResult();
          result.init(data);
          return result;
      }
  
      toJSON(data?: any) {
          data = typeof data === 'object' ? data : {};
          data["success"] = this.success;
          data["message"] = this.message;
          data["accessToken"] = this.accessToken ? this.accessToken.toJSON() : <any>undefined;
          data["refreshToken"] = this.refreshToken ? this.refreshToken.toJSON() : <any>undefined;
          return data;
      }
  }
  
  export interface IAuthenticationResult {
      success?: boolean;
      message?: string | undefined;
      accessToken?: IJwtToken | undefined;
      refreshToken?: IJwtToken | undefined;
  }
  
  export class JwtToken implements IJwtToken {
      token?: string | undefined;
      expireAt?: Date;
  
      constructor(data?: IJwtToken) {
          if (data) {
              for (var property in data) {
                  if (data.hasOwnProperty(property))
                      (<any>this)[property] = (<any>data)[property];
              }
          }
      }
  
      init(_data?: any) {
          if (_data) {
              this.token = _data["token"];
              this.expireAt = _data["expireAt"] ? new Date(_data["expireAt"].toString()) : <any>undefined;
          }
      }
  
      static fromJS(data: any): JwtToken {
          data = typeof data === 'object' ? data : {};
          let result = new JwtToken();
          result.init(data);
          return result;
      }
  
      toJSON(data?: any) {
          data = typeof data === 'object' ? data : {};
          data["token"] = this.token;
          data["expireAt"] = this.expireAt ? this.expireAt.toISOString() : <any>undefined;
          return data;
      }
  }
  
  export interface IJwtToken {
      token?: string | undefined;
      expireAt?: Date;
  }
  
  export class AuthenticateRequest implements IAuthenticateRequest {
      usernameOrEmail?: string | undefined;
      password?: string | undefined;
  
      constructor(data?: IAuthenticateRequest) {
          if (data) {
              for (var property in data) {
                  if (data.hasOwnProperty(property))
                      (<any>this)[property] = (<any>data)[property];
              }
          }
      }
  
      init(_data?: any) {
          if (_data) {
              this.usernameOrEmail = _data["usernameOrEmail"];
              this.password = _data["password"];
          }
      }
  
      static fromJS(data: any): AuthenticateRequest {
          data = typeof data === 'object' ? data : {};
          let result = new AuthenticateRequest();
          result.init(data);
          return result;
      }
  
      toJSON(data?: any) {
          data = typeof data === 'object' ? data : {};
          data["usernameOrEmail"] = this.usernameOrEmail;
          data["password"] = this.password;
          return data;
      }
  }
  
  export interface IAuthenticateRequest {
      usernameOrEmail?: string | undefined;
      password?: string | undefined;
  }
  
  export class RefreshTokenRequest implements IRefreshTokenRequest {
      refreshToken?: string | undefined;
  
      constructor(data?: IRefreshTokenRequest) {
          if (data) {
              for (var property in data) {
                  if (data.hasOwnProperty(property))
                      (<any>this)[property] = (<any>data)[property];
              }
          }
      }
  
      init(_data?: any) {
          if (_data) {
              this.refreshToken = _data["refreshToken"];
          }
      }
  
      static fromJS(data: any): RefreshTokenRequest {
          data = typeof data === 'object' ? data : {};
          let result = new RefreshTokenRequest();
          result.init(data);
          return result;
      }
  
      toJSON(data?: any) {
          data = typeof data === 'object' ? data : {};
          data["refreshToken"] = this.refreshToken;
          return data;
      }
  }
  
  export interface IRefreshTokenRequest {
      refreshToken?: string | undefined;
  }
  
  export class RevokeRefreshTokenRequest implements IRevokeRefreshTokenRequest {
      refreshToken?: string | undefined;
  
      constructor(data?: IRevokeRefreshTokenRequest) {
          if (data) {
              for (var property in data) {
                  if (data.hasOwnProperty(property))
                      (<any>this)[property] = (<any>data)[property];
              }
          }
      }
  
      init(_data?: any) {
          if (_data) {
              this.refreshToken = _data["refreshToken"];
          }
      }
  
      static fromJS(data: any): RevokeRefreshTokenRequest {
          data = typeof data === 'object' ? data : {};
          let result = new RevokeRefreshTokenRequest();
          result.init(data);
          return result;
      }
  
      toJSON(data?: any) {
          data = typeof data === 'object' ? data : {};
          data["refreshToken"] = this.refreshToken;
          return data;
      }
  }
  
  export interface IRevokeRefreshTokenRequest {
      refreshToken?: string | undefined;
  }
  
  export class DonationTypeDto implements IDonationTypeDto {
      label?: string | undefined;
      name?: string | undefined;
      defaultVolume?: string | undefined;
  
      constructor(data?: IDonationTypeDto) {
          if (data) {
              for (var property in data) {
                  if (data.hasOwnProperty(property))
                      (<any>this)[property] = (<any>data)[property];
              }
          }
      }
  
      init(_data?: any) {
          if (_data) {
              this.label = _data["label"];
              this.name = _data["name"];
              this.defaultVolume = _data["defaultVolume"];
          }
      }
  
      static fromJS(data: any): DonationTypeDto {
          data = typeof data === 'object' ? data : {};
          let result = new DonationTypeDto();
          result.init(data);
          return result;
      }
  
      toJSON(data?: any) {
          data = typeof data === 'object' ? data : {};
          data["label"] = this.label;
          data["name"] = this.name;
          data["defaultVolume"] = this.defaultVolume;
          return data;
      }
  }
  
  export interface IDonationTypeDto {
      label?: string | undefined;
      name?: string | undefined;
      defaultVolume?: string | undefined;
  }
  
  export class DonationGroupDto implements IDonationGroupDto {
      key?: string | undefined;
      donations?: DonationDto[] | undefined;
  
      constructor(data?: IDonationGroupDto) {
          if (data) {
              for (var property in data) {
                  if (data.hasOwnProperty(property))
                      (<any>this)[property] = (<any>data)[property];
              }
              if (data.donations) {
                  this.donations = [];
                  for (let i = 0; i < data.donations.length; i++) {
                      let item = data.donations[i];
                      this.donations[i] = item && !(<any>item).toJSON ? new DonationDto(item) : <DonationDto>item;
                  }
              }
          }
      }
  
      init(_data?: any) {
          if (_data) {
              this.key = _data["key"];
              if (Array.isArray(_data["donations"])) {
                  this.donations = [] as any;
                  for (let item of _data["donations"])
                      this.donations!.push(DonationDto.fromJS(item));
              }
          }
      }
  
      static fromJS(data: any): DonationGroupDto {
          data = typeof data === 'object' ? data : {};
          let result = new DonationGroupDto();
          result.init(data);
          return result;
      }
  
      toJSON(data?: any) {
          data = typeof data === 'object' ? data : {};
          data["key"] = this.key;
          if (Array.isArray(this.donations)) {
              data["donations"] = [];
              for (let item of this.donations)
                  data["donations"].push(item.toJSON());
          }
          return data;
      }
  }
  
  export interface IDonationGroupDto {
      key?: string | undefined;
      donations?: IDonationDto[] | undefined;
  }
  
  export class DonationDto implements IDonationDto {
      date?: Date;
      location?: string | undefined;
      volume?: number;
      donationTypeLabel?: string | undefined;
  
      constructor(data?: IDonationDto) {
          if (data) {
              for (var property in data) {
                  if (data.hasOwnProperty(property))
                      (<any>this)[property] = (<any>data)[property];
              }
          }
      }
  
      init(_data?: any) {
          if (_data) {
              this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
              this.location = _data["location"];
              this.volume = _data["volume"];
              this.donationTypeLabel = _data["donationTypeLabel"];
          }
      }
  
      static fromJS(data: any): DonationDto {
          data = typeof data === 'object' ? data : {};
          let result = new DonationDto();
          result.init(data);
          return result;
      }
  
      toJSON(data?: any) {
          data = typeof data === 'object' ? data : {};
          data["date"] = this.date ? this.date.toISOString() : <any>undefined;
          data["location"] = this.location;
          data["volume"] = this.volume;
          data["donationTypeLabel"] = this.donationTypeLabel;
          return data;
      }
  }
  
  export interface IDonationDto {
      date?: Date;
      location?: string | undefined;
      volume?: number;
      donationTypeLabel?: string | undefined;
  }
  
  export class DonationSummaryDto implements IDonationSummaryDto {
      donationType?: string | undefined;
      count?: number;
      amount?: number;
  
      constructor(data?: IDonationSummaryDto) {
          if (data) {
              for (var property in data) {
                  if (data.hasOwnProperty(property))
                      (<any>this)[property] = (<any>data)[property];
              }
          }
      }
  
      init(_data?: any) {
          if (_data) {
              this.donationType = _data["donationType"];
              this.count = _data["count"];
              this.amount = _data["amount"];
          }
      }
  
      static fromJS(data: any): DonationSummaryDto {
          data = typeof data === 'object' ? data : {};
          let result = new DonationSummaryDto();
          result.init(data);
          return result;
      }
  
      toJSON(data?: any) {
          data = typeof data === 'object' ? data : {};
          data["donationType"] = this.donationType;
          data["count"] = this.count;
          data["amount"] = this.amount;
          return data;
      }
  }
  
  export interface IDonationSummaryDto {
      donationType?: string | undefined;
      count?: number;
      amount?: number;
  }
  
  export class DonationWithPeselDto extends DonationDto implements IDonationWithPeselDto {
      pesel?: string | undefined;
  
      constructor(data?: IDonationWithPeselDto) {
          super(data);
      }
  
      init(_data?: any) {
          super.init(_data);
          if (_data) {
              this.pesel = _data["pesel"];
          }
      }
  
      static fromJS(data: any): DonationWithPeselDto {
          data = typeof data === 'object' ? data : {};
          let result = new DonationWithPeselDto();
          result.init(data);
          return result;
      }
  
      toJSON(data?: any) {
          data = typeof data === 'object' ? data : {};
          data["pesel"] = this.pesel;
          super.toJSON(data);
          return data;
      }
  }
  
  export interface IDonationWithPeselDto extends IDonationDto {
      pesel?: string | undefined;
  }
  
  export class DeleteDonationRequest implements IDeleteDonationRequest {
      pesel?: string | undefined;
      date?: Date;
  
      constructor(data?: IDeleteDonationRequest) {
          if (data) {
              for (var property in data) {
                  if (data.hasOwnProperty(property))
                      (<any>this)[property] = (<any>data)[property];
              }
          }
      }
  
      init(_data?: any) {
          if (_data) {
              this.pesel = _data["pesel"];
              this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
          }
      }
  
      static fromJS(data: any): DeleteDonationRequest {
          data = typeof data === 'object' ? data : {};
          let result = new DeleteDonationRequest();
          result.init(data);
          return result;
      }
  
      toJSON(data?: any) {
          data = typeof data === 'object' ? data : {};
          data["pesel"] = this.pesel;
          data["date"] = this.date ? this.date.toISOString() : <any>undefined;
          return data;
      }
  }
  
  export interface IDeleteDonationRequest {
      pesel?: string | undefined;
      date?: Date;
  }
  
  export class DonorExtDto implements IDonorExtDto {
      id?: string;
      pesel?: string | undefined;
      firstName?: string | undefined;
      lastName?: string | undefined;
      birthDay?: Date;
      gender?: GenderType;
      bloodType?: BloodTypeDto2 | undefined;
  
      constructor(data?: IDonorExtDto) {
          if (data) {
              for (var property in data) {
                  if (data.hasOwnProperty(property))
                      (<any>this)[property] = (<any>data)[property];
              }
              this.bloodType = data.bloodType && !(<any>data.bloodType).toJSON ? new BloodTypeDto2(data.bloodType) : <BloodTypeDto2>this.bloodType;
          }
      }
  
      init(_data?: any) {
          if (_data) {
              this.id = _data["id"];
              this.pesel = _data["pesel"];
              this.firstName = _data["firstName"];
              this.lastName = _data["lastName"];
              this.birthDay = _data["birthDay"] ? new Date(_data["birthDay"].toString()) : <any>undefined;
              this.gender = _data["gender"];
              this.bloodType = _data["bloodType"] ? BloodTypeDto2.fromJS(_data["bloodType"]) : <any>undefined;
          }
      }
  
      static fromJS(data: any): DonorExtDto {
          data = typeof data === 'object' ? data : {};
          let result = new DonorExtDto();
          result.init(data);
          return result;
      }
  
      toJSON(data?: any) {
          data = typeof data === 'object' ? data : {};
          data["id"] = this.id;
          data["pesel"] = this.pesel;
          data["firstName"] = this.firstName;
          data["lastName"] = this.lastName;
          data["birthDay"] = this.birthDay ? this.birthDay.toISOString() : <any>undefined;
          data["gender"] = this.gender;
          data["bloodType"] = this.bloodType ? this.bloodType.toJSON() : <any>undefined;
          return data;
      }
  }
  
  export interface IDonorExtDto {
      id?: string;
      pesel?: string | undefined;
      firstName?: string | undefined;
      lastName?: string | undefined;
      birthDay?: Date;
      gender?: GenderType;
      bloodType?: IBloodTypeDto2 | undefined;
  }
  
  export class BloodTypeDto2 implements IBloodTypeDto2 {
      label?: string | undefined;
      symbol?: string | undefined;
  
      constructor(data?: IBloodTypeDto2) {
          if (data) {
              for (var property in data) {
                  if (data.hasOwnProperty(property))
                      (<any>this)[property] = (<any>data)[property];
              }
          }
      }
  
      init(_data?: any) {
          if (_data) {
              this.label = _data["label"];
              this.symbol = _data["symbol"];
          }
      }
  
      static fromJS(data: any): BloodTypeDto2 {
          data = typeof data === 'object' ? data : {};
          let result = new BloodTypeDto2();
          result.init(data);
          return result;
      }
  
      toJSON(data?: any) {
          data = typeof data === 'object' ? data : {};
          data["label"] = this.label;
          data["symbol"] = this.symbol;
          return data;
      }
  }
  
  export interface IBloodTypeDto2 {
      label?: string | undefined;
      symbol?: string | undefined;
  }
  
  export class GetDonorInfoQuery implements IGetDonorInfoQuery {
      emailOrPesel?: string | undefined;
  
      constructor(data?: IGetDonorInfoQuery) {
          if (data) {
              for (var property in data) {
                  if (data.hasOwnProperty(property))
                      (<any>this)[property] = (<any>data)[property];
              }
          }
      }
  
      init(_data?: any) {
          if (_data) {
              this.emailOrPesel = _data["emailOrPesel"];
          }
      }
  
      static fromJS(data: any): GetDonorInfoQuery {
          data = typeof data === 'object' ? data : {};
          let result = new GetDonorInfoQuery();
          result.init(data);
          return result;
      }
  
      toJSON(data?: any) {
          data = typeof data === 'object' ? data : {};
          data["emailOrPesel"] = this.emailOrPesel;
          return data;
      }
  }
  
  export interface IGetDonorInfoQuery {
      emailOrPesel?: string | undefined;
  }
  
  export class VerifyDonorCommand implements IVerifyDonorCommand {
      email?: string | undefined;
      pesel?: string | undefined;
  
      constructor(data?: IVerifyDonorCommand) {
          if (data) {
              for (var property in data) {
                  if (data.hasOwnProperty(property))
                      (<any>this)[property] = (<any>data)[property];
              }
          }
      }
  
      init(_data?: any) {
          if (_data) {
              this.email = _data["email"];
              this.pesel = _data["pesel"];
          }
      }
  
      static fromJS(data: any): VerifyDonorCommand {
          data = typeof data === 'object' ? data : {};
          let result = new VerifyDonorCommand();
          result.init(data);
          return result;
      }
  
      toJSON(data?: any) {
          data = typeof data === 'object' ? data : {};
          data["email"] = this.email;
          data["pesel"] = this.pesel;
          return data;
      }
  }
  
  export interface IVerifyDonorCommand {
      email?: string | undefined;
      pesel?: string | undefined;
  }
  
  export interface FileResponse {
      data: Blob;
      status: number;
      fileName?: string;
      headers?: { [name: string]: any };
  }
  
  export class ApiException extends Error {
      message: string;
      status: number;
      response: string;
      headers: { [key: string]: any; };
      result: any;
  
      constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
          super();
  
          this.message = message;
          this.status = status;
          this.response = response;
          this.headers = headers;
          this.result = result;
      }
  
      protected isApiException = true;
  
      static isApiException(obj: any): obj is ApiException {
          return obj.isApiException === true;
      }
  }
  
  function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
      if (result !== null && result !== undefined)
          throw result;
      else
          throw new ApiException(message, status, response, headers, null);
  }