/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export interface IAccountsClient {
    registerDonor(command: RegisterDonorCommand): Promise<DonorDto>;
}

export class AccountsClient implements IAccountsClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl;
    }

    registerDonor(command: RegisterDonorCommand , cancelToken?: CancelToken | undefined): Promise<DonorDto> {
        let url_ = this.baseUrl + "/api/Accounts/SignUp";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRegisterDonor(_response);
        });
    }

    protected processRegisterDonor(response: AxiosResponse): Promise<DonorDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DonorDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText as string, _headers);
        }
        return Promise.resolve<DonorDto>(<any>null);
    }
}

export interface IAuthClient {
    signIn(request: AuthenticateRequest): Promise<AuthenticationResult>;
    refreshToken(request: RefreshTokenRequest): Promise<AuthenticationResult>;
    revokeRefreshToken(request: RevokeRefreshTokenRequest): Promise<FileResponse>;
}

export class AuthClient implements IAuthClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl;
    }

    signIn(request: AuthenticateRequest , cancelToken?: CancelToken | undefined): Promise<AuthenticationResult> {
        let url_ = this.baseUrl + "/api/Auth";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSignIn(_response);
        });
    }

    protected processSignIn(response: AxiosResponse): Promise<AuthenticationResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AuthenticationResult.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText as string, _headers);
        }
        return Promise.resolve<AuthenticationResult>(<any>null);
    }

    refreshToken(request: RefreshTokenRequest , cancelToken?: CancelToken | undefined): Promise<AuthenticationResult> {
        let url_ = this.baseUrl + "/api/Auth/Refresh";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRefreshToken(_response);
        });
    }

    protected processRefreshToken(response: AxiosResponse): Promise<AuthenticationResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AuthenticationResult.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText as string, _headers);
        }
        return Promise.resolve<AuthenticationResult>(<any>null);
    }

    revokeRefreshToken(request: RevokeRefreshTokenRequest , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Auth/Revoke";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRevokeRefreshToken(_response);
        });
    }

    protected processRevokeRefreshToken(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: response.data as Blob, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText as string, _headers);
        }
        return Promise.resolve<FileResponse>(<any>null);
    }
}

export interface IDonorsClient {
    getCurrentDonorInfo(): Promise<DonorDto>;
    getDonations(): Promise<DonationGroupDto[]>;
    addDonation(donations: DonationDto[]): Promise<DonationDto[]>;
    getDonationSummary(donationType: string | null | undefined): Promise<DonationSummaryDto>;
}

export class DonorsClient implements IDonorsClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl
    }

    getCurrentDonorInfo(  cancelToken?: CancelToken | undefined): Promise<DonorDto> {
        let url_ = this.baseUrl + "/api/Donors/Info";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetCurrentDonorInfo(_response);
        });
    }

    protected processGetCurrentDonorInfo(response: AxiosResponse): Promise<DonorDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DonorDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText as string, _headers);
        }
        return Promise.resolve<DonorDto>(<any>null);
    }

    getDonations(  cancelToken?: CancelToken | undefined): Promise<DonationGroupDto[]> {
        let url_ = this.baseUrl + "/api/Donors/Donations";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetDonations(_response);
        });
    }

    protected processGetDonations(response: AxiosResponse): Promise<DonationGroupDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DonationGroupDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText as string, _headers);
        }
        return Promise.resolve<DonationGroupDto[]>(<any>null);
    }

    addDonation(donations: DonationDto[] , cancelToken?: CancelToken | undefined): Promise<DonationDto[]> {
        let url_ = this.baseUrl + "/api/Donors/Donations";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(donations);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddDonation(_response);
        });
    }

    protected processAddDonation(response: AxiosResponse): Promise<DonationDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DonationDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText as string, _headers);
        }
        return Promise.resolve<DonationDto[]>(<any>null);
    }

    getDonationSummary(donationType: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<DonationSummaryDto> {
        let url_ = this.baseUrl + "/api/Donors/Summary?";
        if (donationType !== undefined && donationType !== null)
            url_ += "donationType=" + encodeURIComponent("" + donationType) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetDonationSummary(_response);
        });
    }

    protected processGetDonationSummary(response: AxiosResponse): Promise<DonationSummaryDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DonationSummaryDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText as string, _headers);
        }
        return Promise.resolve<DonationSummaryDto>(<any>null);
    }
}

export class DonorDto implements IDonorDto {
    id?: string;
    gender?: GenderType;
    birthDay?: Date;
    firstName?: string | undefined;
    lastName?: string | undefined;

    constructor(data?: IDonorDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.gender = _data["gender"];
            this.birthDay = _data["birthDay"] ? new Date(_data["birthDay"].toString()) : <any>undefined;
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
        }
    }

    static fromJS(data: any): DonorDto {
        data = typeof data === 'object' ? data : {};
        let result = new DonorDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["gender"] = this.gender;
        data["birthDay"] = this.birthDay ? this.birthDay.toISOString() : <any>undefined;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        return data; 
    }
}

export interface IDonorDto {
    id?: string;
    gender?: GenderType;
    birthDay?: Date;
    firstName?: string | undefined;
    lastName?: string | undefined;
}

export enum GenderType {
    Male = 1,
    Female = 2,
}

export class RegisterDonorCommand implements IRegisterDonorCommand {
    userName?: string | undefined;
    email?: string | undefined;
    pesel?: string | undefined;
    password?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    gender?: GenderType;
    birthDay?: Date;

    constructor(data?: IRegisterDonorCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.email = _data["email"];
            this.pesel = _data["pesel"];
            this.password = _data["password"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.gender = _data["gender"];
            this.birthDay = _data["birthDay"] ? new Date(_data["birthDay"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RegisterDonorCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterDonorCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["email"] = this.email;
        data["pesel"] = this.pesel;
        data["password"] = this.password;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["gender"] = this.gender;
        data["birthDay"] = this.birthDay ? this.birthDay.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IRegisterDonorCommand {
    userName?: string | undefined;
    email?: string | undefined;
    pesel?: string | undefined;
    password?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    gender?: GenderType;
    birthDay?: Date;
}

export class AuthenticationResult implements IAuthenticationResult {
    success?: boolean;
    message?: string | undefined;
    accessToken?: JwtToken | undefined;
    refreshToken?: JwtToken | undefined;

    constructor(data?: IAuthenticationResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.message = _data["message"];
            this.accessToken = _data["accessToken"] ? JwtToken.fromJS(_data["accessToken"]) : <any>undefined;
            this.refreshToken = _data["refreshToken"] ? JwtToken.fromJS(_data["refreshToken"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AuthenticationResult {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticationResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["message"] = this.message;
        data["accessToken"] = this.accessToken ? this.accessToken.toJSON() : <any>undefined;
        data["refreshToken"] = this.refreshToken ? this.refreshToken.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IAuthenticationResult {
    success?: boolean;
    message?: string | undefined;
    accessToken?: JwtToken | undefined;
    refreshToken?: JwtToken | undefined;
}

export class JwtToken implements IJwtToken {
    token?: string | undefined;
    expireAt?: Date;

    constructor(data?: IJwtToken) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"];
            this.expireAt = _data["expireAt"] ? new Date(_data["expireAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): JwtToken {
        data = typeof data === 'object' ? data : {};
        let result = new JwtToken();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        data["expireAt"] = this.expireAt ? this.expireAt.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IJwtToken {
    token?: string | undefined;
    expireAt?: Date;
}

export class AuthenticateRequest implements IAuthenticateRequest {
    usernameOrEmail?: string | undefined;
    password?: string | undefined;

    constructor(data?: IAuthenticateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.usernameOrEmail = _data["usernameOrEmail"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): AuthenticateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["usernameOrEmail"] = this.usernameOrEmail;
        data["password"] = this.password;
        return data; 
    }
}

export interface IAuthenticateRequest {
    usernameOrEmail?: string | undefined;
    password?: string | undefined;
}

export class RefreshTokenRequest implements IRefreshTokenRequest {
    refreshToken?: string | undefined;

    constructor(data?: IRefreshTokenRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.refreshToken = _data["refreshToken"];
        }
    }

    static fromJS(data: any): RefreshTokenRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RefreshTokenRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["refreshToken"] = this.refreshToken;
        return data; 
    }
}

export interface IRefreshTokenRequest {
    refreshToken?: string | undefined;
}

export class RevokeRefreshTokenRequest implements IRevokeRefreshTokenRequest {
    refreshToken?: string | undefined;

    constructor(data?: IRevokeRefreshTokenRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.refreshToken = _data["refreshToken"];
        }
    }

    static fromJS(data: any): RevokeRefreshTokenRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RevokeRefreshTokenRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["refreshToken"] = this.refreshToken;
        return data; 
    }
}

export interface IRevokeRefreshTokenRequest {
    refreshToken?: string | undefined;
}

export class DonationGroupDto implements IDonationGroupDto {
    key?: string | undefined;
    donations?: DonationDto[] | undefined;

    constructor(data?: IDonationGroupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"];
            if (Array.isArray(_data["donations"])) {
                this.donations = [] as any;
                for (let item of _data["donations"])
                    this.donations!.push(DonationDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DonationGroupDto {
        data = typeof data === 'object' ? data : {};
        let result = new DonationGroupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        if (Array.isArray(this.donations)) {
            data["donations"] = [];
            for (let item of this.donations)
                data["donations"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IDonationGroupDto {
    key?: string | undefined;
    donations?: DonationDto[] | undefined;
}

export class DonationDto implements IDonationDto {
    date?: Date;
    location?: string | undefined;
    volume?: number;
    donationTypeLabel?: string | undefined;

    constructor(data?: IDonationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.location = _data["location"];
            this.volume = _data["volume"];
            this.donationTypeLabel = _data["donationTypeLabel"];
        }
    }

    static fromJS(data: any): DonationDto {
        data = typeof data === 'object' ? data : {};
        let result = new DonationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["location"] = this.location;
        data["volume"] = this.volume;
        data["donationTypeLabel"] = this.donationTypeLabel;
        return data; 
    }
}

export interface IDonationDto {
    date?: Date;
    location?: string | undefined;
    volume?: number;
    donationTypeLabel?: string | undefined;
}

export class DonationSummaryDto implements IDonationSummaryDto {
    donationType?: string | undefined;
    count?: number;
    amount?: number;

    constructor(data?: IDonationSummaryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.donationType = _data["donationType"];
            this.count = _data["count"];
            this.amount = _data["amount"];
        }
    }

    static fromJS(data: any): DonationSummaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new DonationSummaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["donationType"] = this.donationType;
        data["count"] = this.count;
        data["amount"] = this.amount;
        return data; 
    }
}

export interface IDonationSummaryDto {
    donationType?: string | undefined;
    count?: number;
    amount?: number;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}